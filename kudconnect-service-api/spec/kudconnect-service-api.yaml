openapi: 3.0.3
info:
  version: versionNumber
  title: Online Recruiting Tool
  description:  Online Recruiting Tool
  contact:
    name: API Support
    email: contact@kudostech.com
servers:
  - url: https://api-url.com/v1

paths:
  /user/me:
    get:
      summary: Get current logged in user
      operationId: getCurrentUser
      tags:
        - UserDetails
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
    put:
        summary: Update current logged in user details
        operationId: updateCurrentUser
        tags:
            - UserDetails
        requestBody:
            description: User object that needs to be updated
            content:
              application/json:
                  schema:
                    $ref: '#/components/schemas/UpdateUserDetailsRequest'
            required: true
        responses:
            '200':
              description: Successful operation
  /candidates:
    get:
      summary: Lists all candidates
      operationId: listCandidates
      tags:
        - Candidates
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: Candidates results list
                type: array
                items:
                  $ref: '#/components/schemas/Candidate'
    post:
      summary: Creates a new candidate
      operationId: createCandidate
      tags:
        - Candidates
      requestBody:
        description: Candidate object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
        required: true
      responses:
        '201':
          description: Candidate created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceUUID'
  /candidates/{candidateId}:
    parameters:
      - $ref: '#/components/parameters/CandidateIdPathParameter'
    get:
      summary: Find candidate by ID
      operationId: getCandidateById
      tags:
        - Candidates
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        '404':
          description: Candidate not found
    delete:
      summary: Deletes a candidate
      operationId: deleteCandidate
      tags:
        - Candidates
      responses:
        '200':
          description: Candidate deleted
        '404':
          description: Candidate not found
    patch:
      description: >-
        Updates a candidate with a new data.
      summary: updates a candidate
      operationId: patchCandidate
      tags:
        - Candidates
      requestBody:
        description: >-
          The specification of the values to be updated for the user.
          See path for possible fields to be updated
          JSON Patch definition according to <a href="https://tools.ietf.org/html/rfc6902">RFC6902</a
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchOperationCandidate'
      responses:
        204:
          description: Candidate updated successfully
components:
  parameters:
    CandidateIdPathParameter:
      name: candidateId
      in: path
      required: true
      example: 48a55ff9-9be7-42f9-b659-83a3d90666bf
      schema:
        type: string
        format: uuid
  schemas:
    UserDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        avatar:
          type: string
          description: The id of avatar
    UpdateUserDetailsRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        avatar:
          type: string
          description: The id of avatar
    RegisterUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        avatar:
          type: string
          description: The id of avatar
    Candidate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        status:
          type: string
          description: The status of the candidate (e.g., 'new', 'interview', 'hired')
        appliedPosition:
          type: string
          description: The position the candidate applied for
    ResourceUUID:
      type: object
      description: The UUID of the resource
      properties:
        id:
          type: string
          description: The UUID of the resource
          example: 1a7588a5-a684-4cd7-8f98-11e660af2289
          format: uuid
    PatchOperationCandidate:
      description: All patchable paths of a candidate
      type: object
      properties:
        path:
          type: string
          description: The path of the property to be updated
          enum:
            - "/firstName"
            - "/lastName"
            - "/email"
      allOf:
        - $ref: "#/components/schemas/JsonPatchOperation"
    JsonPatchOperation:
      description: JSON Patch definition according to <a href="http://tools.ietf.org/html/rfc6902">RFC6902</a>
      required:
        - op
        - path
      properties:
        op:
          $ref: '#/components/schemas/PatchOperation'
        path:
          type: string
          description: The path of the property to be updated
          example: "/somePath"
        value:
          type: object
          description: The new value of the property to be updated
          example: new value
    PatchOperation:
      description: >
        A procedure is conducted on the data structures depicted in a JSON document. 
        At present, only the operations 'add' and 'remove' can be used for updating data structures with multiple elements. 
        The 'add' operation includes a new element to the collection. If an element with an identical key is already in a unique collection (Set), 
        the 'add' operation updates that value instead. The 'remove' operation uses a key to pinpoint and delete the element from the collection. 
        The patch operations available for fields are listed in a field's description.
      type: string
      enum:
        - replace
        - add
        - remove
    RFC7807Problem:
      description: Detailed information on the error
      properties:
        timestamp:
          type: string
          format: date-time
          description: error time as UTC date-time
        type:
          type: string
          format: uri
          description: further information on the error
          default: 'about:blank'
        title:
          type: string
          description: error message
          example: Bad Request
        status:
          type: integer
          format: int32
          description: HTTP status code based on the following error codes (https://tools.ietf.org/html/rfc2616#section-10)
          example: 400
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
        detail:
          type: string
          description: further description of the error pattern
          example: JSON parse error
        traceId:
          type: string
          description: Trace id of the request
          example: avx1234asd
        instance:
          type: string
          format: uri
          description: calling path
        violations:
          type: array
          description: list of fields with incorrect content
          items:
            $ref: '#/components/schemas/Violation'
    Violation:
      description: description of a faulty field value
      properties:
        field:
          type: string
          description: name of the field
          example: Company.companyId
        message:
          type: string
          description: error description
          example: must be greater than or equal to 1
  examples:
    PatchArray:
      value:
        - op: "add"
          path: "/firstName"
          value: "John"
