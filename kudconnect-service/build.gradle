plugins {
    //TODO: Add versions as variables in gradle.properties
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.openapi.generator' version '6.6.0'
}

repositories {
    mavenLocal()
    maven { url "https://repo.spring.io/snapshot" }
    mavenCentral()
}

configurations {
    openapi
    compileOnly {
        extendsFrom annotationProcessor
    }
    acceptanceImplementation {
        extendsFrom testImplementation
    }
}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    openapi "ro.kudostech:kudconnect-service-api:$KudConnectApiVersion@yaml"
    implementation 'org.springframework.modulith:spring-modulith-bom:1.0.0-SNAPSHOT'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.2.12'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    runtimeOnly 'org.postgresql:postgresql'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'


    // Test
    testImplementation(platform("org.junit:junit-bom:5.9.3"))
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'com.h2database:h2:2.1.214'


    // Acceptance tests
    acceptanceImplementation('org.springframework.boot:spring-boot-starter-test')
    acceptanceImplementation 'io.rest-assured:rest-assured'
    acceptanceImplementation 'io.cucumber:cucumber-java:7.12.1'
    acceptanceImplementation 'io.cucumber:cucumber-junit:7.12.1'
    acceptanceImplementation 'io.cucumber:cucumber-spring:7.12.1'
    acceptanceImplementation 'org.awaitility:awaitility:4.2.0'
    acceptanceImplementation 'com.auth0:java-jwt:4.4.0'
}


// OpenAPI configuration
def openApiServerDir = "$buildDir/generated/openapi/server".toString()
tasks.register('copyOpenApiSpecs', Copy) {
    delete "spec/external/"

    dependsOn configurations.openapi
    from configurations.openapi.singleFile.absolutePath

    include "**/*.yaml", "**/*.yml"
    rename("kudconnect-service-api-" + project.property("KudConnectApiVersion") + ".yaml", "kudconnect-service-api.yaml")
    includeEmptyDirs = false
    into "$projectDir/spec/external/"
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/spec/external/kudconnect-service-api.yaml".toString()
    outputDir = openApiServerDir

    apiPackage = 'ro.kudostech.kudconnect.api'
    modelPackage = 'ro.kudostech.kudconnect.api.model'
    modelNameSuffix = 'Dto'
    configOptions = [
            artifactId                    : project.baseName,
            dateLibrary                   : "java8",
            delegatePattern               : "false",
            enumPropertyNaming            : "UPPERCASE",
            exceptionHandler              : "false",
            generateBuilders              : "false",
            gradleBuildFile               : "false",
            hideGenerationTimestamp       : "true",
            interfaceOnly                 : "true",
            interfacePrefix               : "false",
            library                       : "spring-cloud",
            openApiNullable               : "false",
            removeEnumValuePrefix         : "false",
            removeOperationIdPrefix       : "true",
            skipDefaultInterface          : "true",
            useSpringBoot3                : "true",
            useBeanValidation             : "true",
            useTags                       : "true",
            // @lombok.Generated makes jacoco ignore the generated classes. The @Generated annotation added by openapi does not have the correct retention
            // period for this. See also https://www.baeldung.com/jacoco-report-exclude
            additionalModelTypeAnnotations: "@lombok.Generated",
            additionalEnumTypeAnnotations : "@lombok.Generated",
    ]
}

tasks.compileJava.dependsOn tasks.openApiGenerate
tasks.sourcesJar.dependsOn tasks.openApiGenerate
tasks.openApiGenerate.dependsOn tasks.copyOpenApiSpecs

// Set Strategy to permit considering generated classes
sourceSets {
    main {
        java.srcDir "src/main/java"
        java.srcDir "${openApiServerDir}/src/main/java"
        resources.srcDir "src/main/resources"
    }
    test {
        java.srcDir "src/test/java"
        resources.srcDir "src/test/resources"
    }
    acceptance {
        java.srcDir 'src/acceptance/java'
//        java.srcDir "${openApiClientDir}/src/java"
        resources.srcDir 'src/acceptance/bdd'
        compileClasspath += sourceSets.main.output + configurations.testCompileClasspath + configurations.compileClasspath
        runtimeClasspath += output + compileClasspath
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
processTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
processAcceptanceResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
tasks.named("sourcesJar") { duplicatesStrategy = 'include' }

tasks.named('test') {
    useJUnitPlatform()
}
